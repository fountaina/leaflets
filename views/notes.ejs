<body>
    <%- include ("partials/header.ejs") %>

    <% if (notes.length != 0) { %>
        <h3>My Notes on <em> <%= notes[0].book_name %> </em></h3>
        <ol>
            <% notes.forEach((note) => { %>
                <li> 
                    <p id="note-<%=note.id%>"><%= note.note %></p> 
                

                    <form action="/delete_note" method="POST">
                        <input type="hidden" name="note_id" value="<%= note.id %>">
                        <input type="hidden" name="book_id" value="<%= note.book_id %>">
                        <button class="delete_note" type="submit">Delete Note</button>
                    </form>
                    
                    <button type="button" class="edit_button" onclick="editButtonHandler(this, <%=note.id%>)">Edit</button>
                    <button type="button" class="save_button" style="display: none;" disabled onclick="saveButtonHandler(this, <%=note.id%>, <%=note.book_id%>)">Save</button>
                </li>

                <!-- <form action="/edit_note" method="POST"></form> -->
            <% }); %>
        </ol>
    <% } else { %>
        <h3>No notes for this book!</h3>
    <% } %>

   <em><h3>Add New Note</h3></em>
   <form action="/addnote" method="POST">
        <label for="note">Enter Note:</label>
        <input type="text" id="note" name="note" required>
        <input type="hidden" name="book_id" value="<%=bookId%>">
        <button type="submit">Add</button>
   </form>

<script>

    function modeSwitcher(operationCode, noteId, element) {
        // // Gets the Note parent, Note, edit and Save buton
        let noteItem = element.closest("li"); // Find the closest list item
        let noteElement = noteItem.querySelector(`#note-${noteId}`);
        let editButton = noteItem.querySelector(".edit_button");
        let saveButton = noteItem.querySelector(".save_button");

        // operationCode = 1 to enter edit mode when edit button is clicked. Edit button will hide.
        // operationCode = 2 to leave edit mode when save button is clicked and note is saved succesfully.
        if (operationCode){
            // Gets default note value(<p>) and creates a new input element
            let newElement = document.createElement("input");

            newElement.value = noteElement.textContent;
            newElement.id = `note-${noteId}`;
            noteItem.replaceChild(newElement, noteElement);
            newElement.focus(); // focuses the cursor on the new input element

            // Hides the edit button and displays the save button.
            editButton.style.display = "none";
            saveButton.style.display = "inline-block";
        } else {
            let newElement = document.createElement("p");

            newElement.textContent = noteElement.value;
            newElement.id = `note-${noteId}`;
            noteItem.replaceChild(newElement, noteElement);

            editButton.style.display = "inline-block";
            saveButton.style.display = "none";
            saveButton.disabled = true;
        }
    }

    function enableSaveButton(noteId) {
        let noteElement = document.getElementById(`note-${noteId}`);
        let saveButton = noteElement.closest("li").querySelector(".save_button");
    
        noteElement.addEventListener("input", () => {
            // saveButton.disabled = noteElement.value.trim() === "";
            saveButton.disabled = false;
        });
    }

    function editButtonHandler(element, noteId) {
        modeSwitcher(1, noteId, element);
        enableSaveButton(noteId);
    };

    async function saveButtonHandler(element, noteId, bookId) {
        // Gets the note input element and saves to note variable
        let noteElement = document.getElementById(`note-${noteId}`);
        let note = noteElement.value;
        
        if (!note.trim()) {
            //trim() is to remove any leading or trailing space.
            alert("ERROR! NOTE IS EMPTY")
        } else {
            console.log("Typeof note: " + typeof(bookId));
            console.log("book Id content: " + bookId);
        }

        // Using the fetch API to set a POST request
        try {
            const response = await fetch("/edit_note", {
                method: "POST",
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify({ editedNote: note, noteId: noteId, bookId: bookId}), // Properly wrap note in an object
            });

            if(!response) {
                throw new Error(`Http error! Status: ${response.status}`);
            }

            modeSwitcher(0, noteId, element);
            console.log("Note saved successfully");

        } catch (error) {
            console.error("Error saving note:", error);
            alert("Failed to save note. Please try again.");
        }
    }

</script>
</body>
</html>